generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  phone      String?    @unique
  github_id  String?    @unique
  password   String?
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  sms_tokens SMSToken[]
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  message    Message[]
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
}

model Like {
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id(name: "id", fields: [user_id, post_id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ChatRoom {
  id         String    @id @default(cuid())
  users      User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  room       ChatRoom @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
